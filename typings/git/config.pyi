import abc
import configparser as cp
from io import BytesIO
from typing import (
    Any,
    Dict,
    Generic,
    List,
    OrderedDict,
    Sequence,
    Tuple,
    TypeVar,
    Union,
)

from _typeshed import Incomplete
from git.repo.base import Repo
from git.types import Lit_config_levels, PathLike
from git.util import LockFile

T_ConfigParser = TypeVar("T_ConfigParser", bound="GitConfigParser")
T_OMD_value = TypeVar("T_OMD_value", str, bytes, int, float, bool)
OrderedDict_OMD = OrderedDict
OrderedDict_OMD_T = OrderedDict[str, List[T_OMD_value]]

class MetaParserBuilder(abc.ABCMeta):
    def __new__(
        cls, name: str, bases: Tuple[Any], clsdict: Dict[str, Any]
    ) -> MetaParserBuilder: ...

class SectionConstraint(Generic[T_ConfigParser]):
    def __init__(self, config: T_ConfigParser, section: str) -> None: ...
    def __del__(self) -> None: ...
    def __getattr__(self, attr: str) -> Any: ...
    @property
    def config(self) -> T_ConfigParser: ...
    def release(self) -> None: ...
    def __enter__(self) -> SectionConstraint[T_ConfigParser]: ...
    def __exit__(self, exception_type: str, exception_value: str, traceback: str) -> None: ...

class _OMD[_T](OrderedDict_OMD):
    def __setitem__(self, key: str, value: _T) -> None: ...
    def add(self, key: str, value: Any) -> None: ...
    def setall(self, key: str, values: List[_T]) -> None: ...
    def __getitem__(self, key: str) -> Any: ...
    def getlast(self, key: str) -> Any: ...
    def setlast(self, key: str, value: Any) -> None: ...
    def get(self, key: str, default: Union[_T, None] = ...) -> Union[_T, None]: ...
    def getall(self, key: str) -> List[_T]: ...
    def items(self) -> List[Tuple[str, _T]]: ...
    def items_all(self) -> List[Tuple[str, List[_T]]]: ...

class GitConfigParser(cp.RawConfigParser, metaclass=MetaParserBuilder):
    t_lock = LockFile
    re_comment: Incomplete
    optvalueonly_source: str
    OPTVALUEONLY: Incomplete
    OPTCRE: Incomplete
    def __init__(
        self,
        file_or_files: Union[
            None, PathLike, "BytesIO", Sequence[Union[PathLike, "BytesIO"]]
        ] = ...,
        read_only: bool = ...,
        merge_includes: bool = ...,
        config_level: Union[Lit_config_levels, None] = ...,
        repo: Union["Repo", None] = ...,
    ) -> None: ...
    def __del__(self) -> None: ...
    def __enter__(self) -> GitConfigParser: ...
    def __exit__(self, *args: Any) -> None: ...
    def release(self) -> None: ...
    def optionxform(self, optionstr: str) -> str: ...
    def read(self) -> None: ...
    def items(self, section_name: str) -> List[Tuple[str, str]]: ...
    def items_all(self, section_name: str) -> List[Tuple[str, List[str]]]: ...
    def write(self) -> None: ...
    def add_section(self, section: str) -> None: ...
    @property
    def read_only(self) -> bool: ...
    def get_value(
        self, section: str, option: str, default: Union[int, float, str, bool, None] = ...
    ) -> Union[int, float, str, bool]: ...
    def get_values(
        self, section: str, option: str, default: Union[int, float, str, bool, None] = ...
    ) -> List[Union[int, float, str, bool]]: ...
    def set_value(
        self, section: str, option: str, value: Union[str, bytes, int, float, bool]
    ) -> GitConfigParser: ...
    def add_value(
        self, section: str, option: str, value: Union[str, bytes, int, float, bool]
    ) -> GitConfigParser: ...
    def rename_section(self, section: str, new_name: str) -> GitConfigParser: ...
