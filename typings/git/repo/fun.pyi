from typing import Optional, Union

from git.db import GitCmdObjectDB
from git.objects import Blob, Commit, Object, TagObject, Tree
from git.refs import SymbolicReference
from git.refs.tag import Tag
from git.types import PathLike

from .base import Repo

def touch(filename: str) -> str: ...
def is_git_dir(d: PathLike) -> bool: ...
def find_worktree_git_dir(dotgit: PathLike) -> Optional[str]: ...
def find_submodule_git_dir(d: PathLike) -> Optional["PathLike"]: ...
def short_to_long(odb: GitCmdObjectDB, hexsha: str) -> Optional[bytes]: ...
def name_to_object(
    repo: Repo, name: str, return_ref: bool = ...
) -> Union[SymbolicReference, "Commit", "TagObject", "Blob", "Tree"]: ...
def deref_tag(tag: Tag) -> TagObject: ...
def to_commit(obj: Object) -> Union["Commit", "TagObject"]: ...
def rev_parse(repo: Repo, rev: str) -> Union["Commit", "Tag", "Tree", "Blob"]: ...
