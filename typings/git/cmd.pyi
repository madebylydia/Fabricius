import subprocess
from typing import IO, Any, Dict, Iterator, List, Sequence, Tuple, Union, overload

from _typeshed import Incomplete
from git.types import Literal, PathLike

from .util import LazyMixin

class Git(LazyMixin):
    re_unsafe_protocol: Incomplete
    git_exec_name: str
    GIT_PYTHON_TRACE: Incomplete
    USE_SHELL: bool
    GIT_PYTHON_GIT_EXECUTABLE: Incomplete
    @classmethod
    def refresh(cls, path: Union[None, PathLike] = ...) -> bool: ...
    @classmethod
    def is_cygwin(cls) -> bool: ...
    @overload
    @classmethod
    def polish_url(cls, url: str, is_cygwin: Literal[False] = ...) -> str: ...
    @overload
    @classmethod
    def polish_url(cls, url: str, is_cygwin: Union[None, bool] = ...) -> str: ...
    @classmethod
    def check_unsafe_protocols(cls, url: str) -> None: ...
    @classmethod
    def check_unsafe_options(cls, options: List[str], unsafe_options: List[str]) -> None: ...

    class AutoInterrupt:
        proc: Incomplete
        args: Incomplete
        status: Incomplete
        def __init__(self, proc: Union[None, subprocess.Popen], args: Any) -> None: ...
        def __del__(self) -> None: ...
        def __getattr__(self, attr: str) -> Any: ...
        def wait(self, stderr: Union[None, str, bytes] = ...) -> int: ...

    class CatFileContentStream:
        def __init__(self, size: int, stream: IO[bytes]) -> None: ...
        def read(self, size: int = ...) -> bytes: ...
        def readline(self, size: int = ...) -> bytes: ...
        def readlines(self, size: int = ...) -> List[bytes]: ...
        def __iter__(self) -> Git.CatFileContentStream: ...
        def __next__(self) -> bytes: ...
        next = __next__
        def __del__(self) -> None: ...
    cat_file_header: Incomplete
    cat_file_all: Incomplete
    def __init__(self, working_dir: Union[None, PathLike] = ...) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def set_persistent_git_options(self, **kwargs: Any) -> None: ...
    @property
    def working_dir(self) -> Union[None, PathLike]: ...
    @property
    def version_info(self) -> Tuple[int, int, int, int]: ...
    @overload
    def execute(
        self, command: Union[str, Sequence[Any]], *, as_process: Literal[True]
    ) -> AutoInterrupt: ...
    @overload
    def execute(
        self,
        command: Union[str, Sequence[Any]],
        *,
        as_process: Literal[False] = ...,
        stdout_as_string: Literal[True]
    ) -> Union[str, Tuple[int, str, str]]: ...
    @overload
    def execute(
        self,
        command: Union[str, Sequence[Any]],
        *,
        as_process: Literal[False] = ...,
        stdout_as_string: Literal[False] = ...
    ) -> Union[bytes, Tuple[int, bytes, str]]: ...
    @overload
    def execute(
        self,
        command: Union[str, Sequence[Any]],
        *,
        with_extended_output: Literal[False],
        as_process: Literal[False],
        stdout_as_string: Literal[True]
    ) -> str: ...
    @overload
    def execute(
        self,
        command: Union[str, Sequence[Any]],
        *,
        with_extended_output: Literal[False],
        as_process: Literal[False],
        stdout_as_string: Literal[False]
    ) -> bytes: ...
    def environment(self) -> Dict[str, str]: ...
    def update_environment(self, **kwargs: Any) -> Dict[str, Union[str, None]]: ...
    def custom_environment(self, **kwargs: Any) -> Iterator[None]: ...
    def transform_kwarg(
        self, name: str, value: Any, split_single_char_options: bool
    ) -> List[str]: ...
    def transform_kwargs(
        self, split_single_char_options: bool = ..., **kwargs: Any
    ) -> List[str]: ...
    def __call__(self, **kwargs: Any) -> Git: ...
    def get_object_header(self, ref: str) -> Tuple[str, str, int]: ...
    def get_object_data(self, ref: str) -> Tuple[str, str, int, bytes]: ...
    def stream_object_data(self, ref: str) -> Tuple[str, str, int, "Git.CatFileContentStream"]: ...
    def clear_cache(self) -> Git: ...
