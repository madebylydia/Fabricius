from io import BytesIO
from mmap import mmap
from typing import Iterator, List, Tuple, Union

from git.config import GitConfigParser, SectionConstraint
from git.objects.util import Serializable
from git.refs import SymbolicReference
from git.types import PathLike
from git.util import Actor

class RefLogEntry(Tuple[str, str, Actor, Tuple[int, int], str]):
    def format(self) -> str: ...
    @property
    def oldhexsha(self) -> str: ...
    @property
    def newhexsha(self) -> str: ...
    @property
    def actor(self) -> Actor: ...
    @property
    def time(self) -> Tuple[int, int]: ...
    @property
    def message(self) -> str: ...
    @classmethod
    def new(
        cls, oldhexsha: str, newhexsha: str, actor: Actor, time: int, tz_offset: int, message: str
    ) -> RefLogEntry: ...
    @classmethod
    def from_line(cls, line: bytes) -> RefLogEntry: ...

class RefLog(List[RefLogEntry], Serializable):
    def __new__(cls, filepath: Union[PathLike, None] = ...) -> RefLog: ...
    def __init__(self, filepath: Union[PathLike, None] = ...) -> None: ...
    @classmethod
    def from_file(cls, filepath: PathLike) -> RefLog: ...
    @classmethod
    def path(cls, ref: SymbolicReference) -> str: ...
    @classmethod
    def iter_entries(cls, stream: Union[str, "BytesIO", mmap]) -> Iterator[RefLogEntry]: ...
    @classmethod
    def entry_at(cls, filepath: PathLike, index: int) -> RefLogEntry: ...
    def to_file(self, filepath: PathLike) -> None: ...
    @classmethod
    def append_entry(
        cls,
        config_reader: Union[Actor, "GitConfigParser", "SectionConstraint", None],
        filepath: PathLike,
        oldbinsha: bytes,
        newbinsha: bytes,
        message: str,
        write: bool = ...,
    ) -> RefLogEntry: ...
    def write(self) -> RefLog: ...
