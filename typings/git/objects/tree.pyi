from typing import Any, Callable, Iterator, List, Tuple, Union

import git.diff as git_diff
from git.repo import Repo
from git.types import Literal, PathLike
from git.util import IterableList

from . import util
from .base import IndexObject, IndexObjUnion
from .blob import Blob

TreeCacheTup = Tuple[bytes, int, str]

class TreeModifier:
    def __init__(self, cache: List[TreeCacheTup]) -> None: ...
    def set_done(self) -> TreeModifier: ...
    def add(self, sha: bytes, mode: int, name: str, force: bool = ...) -> TreeModifier: ...
    def add_unchecked(self, binsha: bytes, mode: int, name: str) -> None: ...
    def __delitem__(self, name: str) -> None: ...

class Tree(IndexObject, git_diff.Diffable, util.Traversable, util.Serializable):
    type: Literal["tree"]
    commit_id: int
    blob_id: int
    symlink_id: int
    tree_id: int
    def __init__(
        self, repo: Repo, binsha: bytes, mode: int = ..., path: Union[PathLike, None] = ...
    ) -> None: ...
    def join(self, file: str) -> IndexObjUnion: ...
    def __truediv__(self, file: str) -> IndexObjUnion: ...
    @property
    def trees(self) -> List["Tree"]: ...
    @property
    def blobs(self) -> List[Blob]: ...
    @property
    def cache(self) -> TreeModifier: ...
    def traverse(
        self,
        predicate: Callable[[Union[IndexObjUnion, TraversedTreeTup], int], bool] = ...,
        prune: Callable[[Union[IndexObjUnion, TraversedTreeTup], int], bool] = ...,
        depth: int = ...,
        branch_first: bool = ...,
        visit_once: bool = ...,
        ignore_self: int = ...,
        as_edge: bool = ...,
    ) -> Union[Iterator[IndexObjUnion], Iterator[TraversedTreeTup]]: ...
    def list_traverse(self, *args: Any, **kwargs: Any) -> IterableList[IndexObjUnion]: ...
    def __getslice__(self, i: int, j: int) -> List[IndexObjUnion]: ...
    def __iter__(self) -> Iterator[IndexObjUnion]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, item: Union[str, int, slice]) -> IndexObjUnion: ...
    def __contains__(self, item: Union[IndexObjUnion, PathLike]) -> bool: ...
    def __reversed__(self) -> Iterator[IndexObjUnion]: ...
